stages:
  - build
  - notify
  - test

build-frontend-code-job: # сборка фронтенда
  stage: build  
  only:
    changes:
    - frontend/*         # только если есть изменения в каталоге фронта
  script:        
    - cd frontend
    - npm install        # подтягиваем зависимости
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend # сохраняем артефакт

telegram-notification-frontend:
  stage: notify
  script:
    - 'curl -X POST -H "Content-Type: application/json"
      -d "{\"chat_id\": \"-1001823350512\", \"parse_mode\":\"markdown\",
      \"text\": \"\uD83D\uDE80 *Данил Кузнецов* собрал FRONTEND.\n
      \uD83D\uDD3D [Download frontend artifact](https://gitlab.praktikum-services.ru/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/release-0.0.1/download?job=build-frontend-code-job&job_token=$CI_JOB_TOKEN&private_token=$PROJECT_ACCESS_TOKEN)\n
      Branch: $CI_COMMIT_REF_SLUG\"}"
      https://api.telegram.org/$TELEGRAM_BOT_TOKEN/sendMessage'
  needs:
    - build-frontend-code-job   # если успешно собрали фронт
  rules:
    - if: $CI_COMMIT_TITLE =~ /send notification/   # если заголовок коммита содержит фразу "send notification"

sonarqube-frontend-sast:       # SAST тест от SonarQube
  stage: test
  image: sonarsource/sonar-scanner-cli:latest         # образ
  script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONT}
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONAR_URL}
      -Dsonar.login=${SAUSAGE_STORE_14_FRONT_TOKEN}
  needs:
    - build-frontend-code-job   # если успешно собрали фронт