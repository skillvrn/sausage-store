variables:
  FRONT_ENV_NAME: production-frontend

services:
  - docker:20.10.12-dind-rootless

stages:
  - build
  - test
  - release
  - notify
  - deploy

include:
  remote: 'https://gitlab.com/gitlab-org/gitlab/-/raw/2851f4d5/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml'

build-frontend-code-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # сначала логинимся на hub.docker.com под своей собственной учеткой, чтобы не превышать лимиты pull request'ов
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
  script:
    - cd frontend
    # а теперь используем репозиторий в gitlab'е, переменные генерятся гитлабом
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - >
      docker build
      --build-arg VERSION=${VERSION}
      --tag ${CI_REGISTRY_IMAGE}/sausage-frontend:${VERSION}
      .
    - docker push ${CI_REGISTRY_IMAGE}/sausage-frontend:${VERSION}

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONT}
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONAR_URL}
      -Dsonar.login=${SAUSAGE_STORE_14_FRONT_TOKEN}
      -Dsonar.projectVersion=${VERSION}
  needs:
    - build-frontend-code-job

upload-frontend-release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  needs:
    - build-frontend-code-job
    - sonarqube-frontend-sast
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/sausage-frontend:${VERSION}
    - docker tag ${CI_REGISTRY_IMAGE}/sausage-frontend:${VERSION} ${CI_REGISTRY_IMAGE}/sausage-frontend:latest
    - docker push ${CI_REGISTRY_IMAGE}/sausage-frontend:latest

telegram-notification-frontend:
  stage: notify
  script:
    - 'curl -X POST -H "Content-Type: application/json"
      -d "{\"chat_id\": \"-1001823350512\", \"parse_mode\":\"markdown\",
      \"text\": \"\uD83D\uDE80 Вышла новая версия frontend сосисочной - $VERSION.\n
      \uD83D\uDD3D Скачать docker image можно в репозитории Gitlab CI.\"}"
      https://api.telegram.org/$TELEGRAM_BOT_TOKEN/sendMessage'
  needs:
    - upload-frontend-release
  rules:
    - if: $CI_COMMIT_TITLE =~ /send notification/   # если заголовок коммита содержит фразу "send notification"

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  environment:
    name: ${FRONT_ENV_NAME}
    url: http://std-014-40.praktikum-services.tech/
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - scp ./frontend/deploy-frontend.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/deploy-frontend.sh
    - ssh ${DEV_USER}@${DEV_HOST} chmod +x /home/${DEV_USER}/deploy-frontend.sh
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
  script:
    - >
      ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "FRONTEND_REGISTRY_USER"=${CI_REGISTRY_USER};
      export "FRONTEND_REGISTRY_PASSWORD"=${CI_REGISTRY_PASSWORD};
      export "FRONTEND_REGISTRY"=${CI_REGISTRY};
      export "FRONTEND_REGISTRY_IMAGE"=${CI_REGISTRY_IMAGE};
      /home/${DEV_USER}/deploy-frontend.sh"
    - ssh ${DEV_USER}@${DEV_HOST} rm /home/${DEV_USER}/deploy-frontend.sh
  needs:
    - upload-frontend-release