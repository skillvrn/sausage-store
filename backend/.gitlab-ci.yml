variables:
  BACK_ENV_NAME: production-backend
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "${DOCKER_TLS_CERTDIR}/client"

services:
  - docker:20.10.12-dind-rootless

stages:
  - build
  - test
  - release
  - notify
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml

build-backend-code-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=${VERSION}
      --tag ${CI_REGISTRY_IMAGE}/sausage-backend:${VERSION}
      .
    - docker push ${CI_REGISTRY_IMAGE}/sausage-backend:${VERSION}

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK}
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONAR_URL}
      -Dsonar.login=${SAUSAGE_STORE_14_BACK_TOKEN}
  needs:
    - build-backend-code-job

upload-backend-release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  needs:
    - build-backend-code-job
    - sonarqube-backend-sast
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/sausage-backend:${VERSION}
    - docker tag ${CI_REGISTRY_IMAGE}/sausage-backend:${VERSION} ${CI_REGISTRY_IMAGE}/sausage-backend:latest
    - docker push ${CI_REGISTRY_IMAGE}/sausage-backend:latest

telegram-notification-backend:
  stage: notify
  script:
    - 'curl -X POST -H "Content-Type: application/json"
      -d "{\"chat_id\": \"-1001823350512\", \"parse_mode\":\"markdown\",
      \"text\": \"\uD83D\uDE80 Вышла новая версия backend - $VERSION.\n
      \uD83D\uDD3D Скачать docker образ можно в репозитории Gitlab.\"}"
      https://api.telegram.org/$TELEGRAM_BOT_TOKEN/sendMessage'
  needs:
    - upload-backend-release
  rules:
    - if: $CI_COMMIT_TITLE =~ /send notification/   # если заголовок коммита содержит фразу "send notification"

deploy-backend:
  stage: deploy
  environment:
    name: ${BACK_ENV_NAME}
    url: http://std-014-40.praktikum-services.tech/
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/deploy-backend.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/deploy-backend.sh
    - ssh ${DEV_USER}@${DEV_HOST} chmod +x /home/${DEV_USER}/deploy-backend.sh
    - >
      ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "SPRING_DATASOURCE_URL"=${PGSQL_DATASOURCE};
      export "SPRING_DATASOURCE_USERNAME"=${PGSQL_USER};
      export "SPRING_DATASOURCE_PASSWORD"=${PGSQL_PASS};
      export "SPRING_DATA_MONGODB_URI"=${MONGO_DATA};
      export "BACKEND_REGISTRY_USER"=${CI_REGISTRY_USER};
      export "BACKEND_REGISTRY_PASSWORD"=${CI_REGISTRY_PASSWORD};
      export "BACKEND_REGISTRY"=${CI_REGISTRY};
      export "BACKEND_REGISTRY_IMAGE"=${CI_REGISTRY_IMAGE};
      /home/${DEV_USER}/deploy-backend.sh"
    - ssh ${DEV_USER}@${DEV_HOST} rm /home/${DEV_USER}/deploy-backend.sh
  needs:
    - upload-backend-release
